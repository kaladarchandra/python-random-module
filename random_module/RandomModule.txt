   Module Name :  random
   Prerequicites : A first course in probability
				   Python programming (list comprehensions)



   
   To import  
   ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    >>> import random			    # Imported the random module.
    >>> random.randint(1,10)		# And tested the import, it's working. 
    4								# We will cover the function later



  Functions For Integers 
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  1)random.randrange(start,stop)
    random.randrange(start,stop,[step])
    random.randrange(stop)	
	Three functions are same we will explore one by one
	
	random.randrange(start,stop) :
    This function returns a random number from interval [start,step). For example 
    random.randrange( 3 , 9) randomly returns a number in [ 3 ,4,5,6,7,8] , but it doesn't include the last  element 9 . Another example
    random.randrange(3,7) it randomly returns number in [3,4,5,6], remember it never includes the  last  number.

    (Execution)
    >>> import random
    >>> random.randrange( 3 , 9 ) 			# A random number from range [3, 9)
    5
    >>> for x in range(10):				
    	print( random.randrange( 3 , 9 ), end = ' ' )
	
    7 7 4 7 8 6 3 5 7 6 					# Ignore the looping construct if you don't understad it, we just executed the random.randrange(3,9) 10 times and 		
											# got 10 randomly choosen elements from given interval.

	random.randrange(start,stop,step):
    If you give the third argumen i.e.. random.randrange(start, stop,step), 'start' will be incremented by 'step' until it reaches 'stop'. 
	For example random.randrange( 2 , 13 , 3) : This will start at 2 and increments by 3 upto but not including 13 i.e.. [ 2 , 5 , 8, 11 ], 
	it will return random number from it. And never the  number   3 or 5 , even though 2 < 3 < 13, because it will only consider numbers 
	[ 2 , 2+3 , 2+3+3 , 2+3+3+3, ... upto but not including 13]. and the step argument is not needed by default.
	
	(Execution)
    >>> random.randrange(2,13,3)
    8
    >>> random.randrange(2,13,3)
    5
    >>> random.randrange(2,13,3)
    8
    >>> random.randrange(2,13,3)
    11

	random.randrange(stop) :
    And if you give single number, it will start from zero . Example random.randrange(7) will return a random number from 0 to 6.
	That is random.randrange(7) =  random.randrange(0,7).
	
	(Execution)
	>>> random.randrange(5)
	2
	>>> random.randrange(5)
	3
	>>> random.randrange(5)
	1
	>>> random.randrange(5)
	2
	>>> random.randrange(5)
	4
    
	
	
	
  2)random.randint(a,b) :
    This is very similar to the above randrange() method. It returns random integer in the range [a,b], it includes b too.
    For example random.randint(2,7) returns a random integer from [2,3,4,5,6,7]
	
	(Execution)
	>>> random.randint(2,7)
	7
	>>> random.randint(2,7)
	6
	>>> random.randint(2,7)
	4
	>>> random.randint(2,7)
	5
	>>> random.randint(2,7)
	3
	
	
FUNCTIONS FOR SEQUENCES
--------------------------------------------------------------------------------------------------------------------------------------------------------
    These are applicable for all 'sequences' in python. The basic sequences are list, tuple and range objects. We will use lists here.
	
  1)random.choice(seq):
  
	Return a random element from the non-empty sequence seq. If seq is empty, raises IndexError. For example random.choice([1, 2, 3, 4, 5]) returns the 
	random element from the list [1, 2, 3, 4, 5]. If the list is empty then raises error i.e.. random.choice([]) -> error. 
	
	(Execution)
	>>> import random
	>>> x = ['kaladar', 'Advanced Dev', 'AI Engineer', 1, 7, 13]      
	>>> random.choice(x)												# We ran it three times and got 3 random choosen items from list x
	'kaladar'
	>>> random.choice(x)
	'AI Engineer'
	>>> random.choice(x)
	13
	
	>>> y = []															# An empty list
	>>> random.choice(y)												# List is empty, error raised
	File "<pyshell#5>", line 1, in <module>
    random.choice(y)
	File "C:\Users\kaladar\AppData\Local\Programs\Python\Python37\lib\random.py", line 261, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
	IndexError: Cannot choose from an empty sequence
	

	
	
	
   2)random.choices(population, weights = None, k = 1):     
	 
	It returns a k sized list of elements chosen from the population with repeated items allowed.
	It is selecting randomly k elements from the population. If the population is empty, raises IndexError. 
	 
    This function is little deep to understand let's explore it in parts.
	(Execution-1)
	>>> import random
	>>> li = list(range(20))  												# li = [1, 2, 3, ... ,19]										
	>>> random.choices(li, k = 20)											# List of 20 randomly selected numbers from li.
	[19, 8, 19, 5, 13, 10, 14, 7, 14, 9, 5,	7, 12, 7, 12, 1, 3, 8, 6, 8]	# 19 is selected 2 times! That is what we mean repeation allowed.
	>>> random.choices(li, k = 30)											# List of 30 randomly selected numbers from li. li is 20 itemed list.
	[9, 6, 1, 8, 14, 3, 14, 7, 12, 4, 0, 6, 16, 12, 16, 3, 3, 2, 5, 2,10,	# Randomly selecting elements 30 times in list of 20 elements
	9, 11, 13, 14, 8, 5, 7, 19, 16]
	>>> random.choices(li, k = 2)											# List of 2 randomly selected numbers from li. 
	[3, 4]
	
	In the above examples when we are randomly selecting items from the list li each item is equally likely.
	That is random.choices([1,2,3,4,5], k = 5) we will 	get a five itemed list in that each item is equally likely i.e.. no item is choosed more
	number of times than the other in context of large number of executions . In a single output one item could be more number of times than the other
	but when you execute several times say 1000 times all numbers will have same frequency i.e.. 1 would be 1000 times, 2 would be 1000 times, ... 5 would be 
	1000 times (approximately 1000 times, not exactly). Let's see with an example. 
	
	(Execution-2)
	>>> import random
	>>> li = [1, 2, 3, 4, 5]
	>>> 
	>>> random.choices(li, k = 5)     									# Randomly choose 5 elements from list li. 
	[3, 2, 2, 3, 5]
	>>> 
	>>> lists = [random.choices(li, k = 5) for i in range(1000)] 		# It's okay if you don't understad this line. 'lists' contains 1000 lists like the  
																		# above one. 5(elements in list) * 1000(number of lists) = 5000 numbers will be selected.
																		
	>>> sum([l.count(1) for l in lists])								# Understand carefully, we are counting number of 1's in every list and adding them up.
	1034																# Total 1's in all lists are 1034.
	>>> sum([l.count(2) for l in lists])
	994
	>>> sum([l.count(3) for l in lists])
	1041
	>>> sum([l.count(4) for l in lists])
	975
	>>> sum([l.count(5) for l in lists])
	956
	>>> 1034/5000 * 100, 994/5000 * 100, 1041/5000 * 100, 975/5000 * 100, 956/5000 * 100
	(20.68, 19.88, 20.82, 19.5, 19.12)									# Notice all the elements are nearly 20% of the total.This is what we mean all elements
																		# are seleted equally likely. 1/5 = 20%.


	Now we want the other case, in [1, 2, 3, 4, 5] we want 1 to be selected 30% of the elements,2 to be 20%, 3 to be 4%, 4 to be 40%, 5 to be 6% OUT OF 100% . 
	That is if our lists give 100 elements in lists of any length,nearly 30 elements are 1, nearly 20 are 2, 4 are 3, 40 are 4, 6 are 5. And it is now the
	elements are not choosen equally 1 is 30%, 2 is 20% ....
	This is done by 'weights' attribute in choices method i.e.. random.choices(population, weights=None, cum_weights=None, k=1). 
	'weights' is a list.
	
	1) Length of weights should be equal to length of the input list.
	2) First element weight is relative weight of first element in the weights.
	
	We will explain both these
	List we give as input is [1, 2, 3, 4, 5]
	List we give as weights is [30, 20, 4, 40,6] both are should be same length, first point is explained.
	In [30, 20, 4, 40, 6] relative weight of 30 is  30/30+20+4+40+6 = 30/100 = 0.3 . Converting into %, it is 30%.
	Since 30 + 20 + 4 + 40 + 6 = 100 , relative weight of 20 is 20/100 = 20%, relative weight of 4 is 4/100 = 4%,40 rweight is 40%, 6 rweight is 6%/ 
	[1, 2, 3, 4, 5] -> [30, 20, 3, 40, 6]
	1 -> 30%
	2 -> 20%
	3 -> 3%
	4 -> 40%
	5 -> 6%
	
	Another example, suppose weights be [2, 3, 5, 1, 9]. Here relative weight of first element is = 2 / (2 + 3 + 5 + 1 + 9) = 2 / 20 = 10%, relative weight of 
	second element is = 3 / 20 = 15 % and third, fourth and fifth same. Relative weights are [10%, 15%, 40%, 5%, 30%].
	
	In general, Relative weight of element w[i] is w[i] / w[1] + w[2] + .. +w[n] . For intuitive understanding, we are adding all the weights and we are dividing
	weight of our element with total weight, thus we know how much our weight constitutes in the total. 
	Lets execute both weight examples,[30, 20, 4, 40, 6] and [2, 3, 5, 1, 9].
	
	(EXECUTION-3)
	>>> import random
	>>> population = [1, 2, 3, 4, 5]																# population we give to random.choices().
	>>> weights = [30, 20, 4, 40, 6]																# Weights that we specified.
	>>> random.choices(population, weights, k = len(population))									# A sample example. See how we executed, we give population first
	[1, 4, 4, 5, 1]																					  , next weights list and then length of the list to be returned.
	
	>>> all_choices = [random.choices(population, weights, k = 5) for i in range(100)]				# 100 lists like the previous one. To check distriution of elements.
	>>> Total_elements = 5 * 100																	# Total number of elements in all lists.
	>>> onefrequency = sum([l.count(1) for l in all_choices])										# Total number of one's.
	>>> twofrequency = sum([l.count(2) for l in all_choices])										# Total number of two's....
	>>> threefrequency = sum([l.count(3) for l in all_choices])
	>>> fourfrequency = sum([l.count(4) for l in all_choices])
	>>> fivefrequency = sum([l.count(5) for l in all_choices])

	>>> threefrequency																				# Total number of three's are 29 (all lists combined).
	29
	>>> threefrequency / Total_elements * 100														# Percentage of three's. And it is 5.8%
	5.8
	>>> output_frequency = [onefrequency/Total_elements * 100, twofrequency/Total_elements * 100,   # Percentage of all [1, 2, 3, 4, 5] stored in output_frequency
	threefrequency/Total_elements * 100, fourfrequency/Total_elements * 100,
	fivefrequency/Total_elements * 100]
	
	>>> weights																						# Given weights  
	[30, 20, 4, 40, 6]
	>>> output_frequency																			# Observed frequency of each elements.
	[30.0, 20.0, 5.8, 40.0, 4.2]																	# Look they are very close given weights.
	
	
	Instead of giving weights that add up to 100, which makes the relative weight of an element is itself, we give arbitrary values . And the function will
	find their relative weights and do it's operation.
	
	(EXECUTION-4)
	>>> import random
	>>> population = [1, 2, 3, 4, 5]
	>>> weights = [2, 3, 5, 1, 9]															# Observe Weights do not add up to 100, their sum is 20. It could be any value.
	>>> rweights = [ (2/20)*100, (3/20)*100, (5/20)*100, (1/20)*100, (9/20)*100]			# We find the relative weight of every element in the list rweights.
	>>> random.choices(population, weights, k = len(population))							 
	[5, 5, 5, 1, 5]
	>>> all_choices = [random.choices(population, weights, k = 5) for i in range(100)]		# Same as previous examples, it contains 1000 lists of choices of length 5.
	>>> Total_elements = 5 * 100
	>>> onefrequency = sum([l.count(1) for l in all_choices])								# Counting all number of 1's.
	>>> twofrequency = sum([l.count(2) for l in all_choices])								# Counting all number of 2's...
	>>> threefrequency = sum([l.count(3) for l in all_choices])
	>>> fourfrequency = sum([l.count(4) for l in all_choices])
	>>> fivefrequency = sum([l.count(5) for l in all_choices])
	>>> onefrequency																		# Total number of 1's are 50. 
	50
	>>> onefrequency / Total_elements * 100													# And it's percentage over total is 10%.
	10.0
	>>> fivefrequency
	217
	>>> fivefrequency / Total_elements * 100
	43.4
	>>> output_frequency = [onefrequency/Total_elements * 100, twofrequency/Total_elements * 100, threefrequency/Total_elements * 100, fourfrequency/Total_elements * 100, fivefrequency/Total_elements * 100]
	>>> weights 																			# Given weights.
	[2, 3, 5, 1, 9]
	>>> rweights																			# Relative weights of weights list.
	[10.0, 15.0, 25.0, 5.0, 45.0]
	>>> output_frequency																	# Percentage of each element in all over lists.
	[10.0, 17.0, 23.6, 6.0, 43.4]															  Look how their percentage is equal to relative weights of the weight list.
	
	with this we completed the random.choices() method. Yes, it's a hard one. Remember  this syntax it will become very easy, random.choices(population, weights,k = length),
	population is the list from which we get randomly select elements, weights is the list that specifies amount of each element to be present in the output list from population 
	and k is the length of the list to be returned.
	
   3)random.shuffle(x) :
	Shuffle the sequence x in place i.e.. if x = [1, 2, 3] after random.shuffle(x), x could be [2, 1, 3]. It changes the arrangement of the actual list and arranges the 
	items in different order. Remember it doesn't return a shuffled list! It rearranges the given list. To get a shuffled list see the next function.
      
	(Execution)
	>>> import random
	>>> x = [1, 2, 3, 4, 5]
	>>> random.shuffle(x)
	>>> x
	[5, 1, 4, 2, 3]
	>>> random.shuffle(x)
	>>> x
	[5, 2, 3, 1, 4]
	  
	
   4)random.sample(population, k) :
	 
	Returns a k length list of unique elements randomly chosen from the population sequence or set. Used for random sampling without replacement i.e it selects 
	any element from the population only once. To get the random permutation of the population set k = len(population).
	 
	(Execution)
	>>> import random				
	>>> population = list(range(10))									
	>>> population														# A list of numbers from 0 to 9.
	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	>>> random.sample(population, k = len(population))					# This is what we mean returning an entire shuffled list from previous function.
	[8, 3, 9, 4, 1, 7, 0, 5, 2, 6]										# k = 10 can be placed instead of k = len( population )
	>>> 
	>>> random.sample(population, k = 4)								# A random sample of 4 elements from population.
	[0, 3, 1, 5]
	>>> random.sample(population, k = 4)								# Checkout in all 4 executions no element is repeated.
	[4, 0, 2, 6]
	>>> random.sample(population, k = 4)
	[5, 7, 4, 6]
	>>> random.sample(population, k = 4)
	[6, 5, 9, 8]
	>>> random.sample(population, k = 4)
	[3, 1, 6, 8]
	>>> [6, 5, 9, 8]
	[6, 5, 9, 8]
	
	 
FUNCTIONS FOR REAL VALUED DISTRIBUTIONS
--------------------------------------------------------------------------------------------------------------------------------------------------------
**You need to know the distributions to understand these functions.
  Im not going to explain the distributions here but their code  examples will be in the code module.
  Distributions are always about large number of outputs so we take execute the functions large number of times.

	



If you have any doubts, email me at kaladar10000@gmail.com.